#!/usr/bin/java --source 11

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.Comparator;
import java.util.HashMap;
import java.util.stream.Collectors;

public class Main {

  static class Pair {

    public final String ts;
    public final String cmd;

    public Pair(String ts, String cmd) {
      this.ts = ts;
      this.cmd = cmd;
    }

    public String toString() {
      return ts + "\n" + cmd;
    }
  }

  public static void main(String[] args) throws IOException {
    if (args.length == 0) {
      System.err.println("Please provide the location of your bash_history");
      return;
    }
    var filename = args[0];
    var previousCommands = new HashMap<String, Pair>();
    long unixTime = LocalDateTime.now().minusWeeks(1).toEpochSecond(ZoneOffset.UTC);
    long count = 0;
    try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
      String line, command, timestamp;
      while ((line = br.readLine()) != null) {
        var cleanedLine = line.stripTrailing().stripLeading();
        if (cleanedLine.isEmpty()) {
          continue;
        }
        if (cleanedLine.charAt(0) == '#') {
          var nextLine = br.readLine();
          if (nextLine.isEmpty()) {
            continue;
          }
          if (nextLine.charAt(0) == '#') {
            continue;
          }
          command = nextLine.stripTrailing().stripLeading();
          timestamp = cleanedLine;
        } else {
          command = cleanedLine;
          timestamp = "#" + (unixTime + count);
        }
        previousCommands.putIfAbsent(command, new Pair(timestamp, command));
        count++;
      }
    } catch (IOException e) {
      System.out.println(e.getMessage());
    }

    try (BufferedWriter writer = new BufferedWriter(
        new FileWriter(filename.stripTrailing() + ".new"))) {
      var commandsToSave = previousCommands
          .values()
          .stream()
          .sorted(Comparator.comparing(l -> l.ts))
          .filter(Main::filter)
          .collect(Collectors.toList());

      for (var cmd : commandsToSave) {
        writer.write(cmd.toString() + "\n");
      }
    } catch (IOException e) {
      System.out.println(e.getMessage());
    }
  }

  private static boolean filter(Pair pair) {
    return !(
      pair.cmd.matches("^(cd|cat|ls|rm|mv|ssh|vi|srv|nvim|idea|EOF|EOH|hoistname|srbn|srn|dk).*")
            || pair.cmd.matches("^history_cleaner .*")
            || pair.cmd.matches("^k logs .*")
            || pair.cmd.matches("^git (commit|push|pull|rebase|stash|merge|reset|diff|checkout|branch).*")
            || pair.cmd.matches("^[0-9|\":\\]].*")
            || pair.cmd.charAt(0) == 'â”‚'
    );
  }
}
